import React, { useEffect, useState } from "react";

// Symbols for cryptocurrencies
const cryptoPairs = [
  { from: "bitcoin", to: "usd" }, // Bitcoin to USD
  { from: "ethereum", to: "usd" }, // Ethereum to USD
  { from: "litecoin", to: "usd" }, // Litecoin to USD
];

const Ticker = () => {
  const [tickerData, setTickerData] = useState([]);
  const [loading, setLoading] = useState(true); // Loading state
  const [error, setError] = useState(null); // State for error handling

  // Fetch crypto prices from CoinGecko via your backend
  const fetchCryptoPrices = async () => {
    const cryptoData = [];
    for (const { from, to } of cryptoPairs) {
      try {
        const response = await fetch(
          `http://localhost:3000/crypto-price?coinId=${from}&currency=${to}`
        );
        
        if (!response.ok) {
          throw new Error(`Failed to fetch data for ${from}/${to}`);
        }

        const data = await response.json();
        if (data[from]) {
          const price = data[from][to];
          cryptoData.push({ symbol: `${from.toUpperCase()}/${to.toUpperCase()}`, price });
        } else {
          console.error(`Invalid data for ${from}/${to}:`, data);
          cryptoData.push({
            symbol: `${from.toUpperCase()}/${to.toUpperCase()}`,
            price: "N/A",
          });
        }
      } catch (error) {
        console.error(`Error fetching crypto data for ${from}/${to}:`, error);
        cryptoData.push({
          symbol: `${from.toUpperCase()}/${to.toUpperCase()}`,
          price: "N/A",
        });
      }
    }
    return cryptoData;
  };

  // Fetch ticker data and handle loading/error state
  const fetchTickerData = async () => {
    setLoading(true);
    setError(null); // Reset error state before fetching
    try {
      const crypto = await fetchCryptoPrices();
      setTickerData(crypto);
    } catch (error) {
      setError("Failed to load crypto prices. Please try again.");
    }
    setLoading(false);
  };

  // Fetch ticker data every 10 seconds
  useEffect(() => {
    fetchTickerData();
    const interval = setInterval(fetchTickerData, 10000);
    return () => clearInterval(interval); // Cleanup interval
  }, []);

  return (
    <div className="ticker__section">
      <div id="ticker" className="bg-black text-white p-5 overflow-hidden whitespace-nowrap">
        {loading ? (
          <span>Loading...</span> // Display loading message
        ) : error ? (
          <span>{error}</span> // Display error message if any
        ) : tickerData.length === 0 ? (
          <span>No data available</span> // No data available message
        ) : (
          tickerData.map((item, index) => (
            <span key={index} className="mr-5">
              {item.symbol}: {item.price}
            </span>
          ))
        )}
      </div>
    </div>
  );
};

export default Ticker;
